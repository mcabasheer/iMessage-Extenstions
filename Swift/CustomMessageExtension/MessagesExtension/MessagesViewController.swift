//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Basheer Ahamed on 17/8/16.
//  Copyright Â© 2016 Basheer Ahamed. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    @IBAction func happyClicked(_ sender: AnyObject) {
        let message = getMessage(customMessage: "I'm happy today", caption: "happy")
        self.activeConversation?.insert(message, completionHandler: nil)
    }
    
    @IBAction func normalClicked(_ sender: AnyObject) {
        let message = getMessage(customMessage: "I'm having fun today", caption: "normal")
        self.activeConversation?.insert(message, completionHandler: nil)
    }
    
    
    @IBAction func sadClicked(_ sender: AnyObject) {
        let message = getMessage(customMessage: "I'm sad today", caption: "sad")
        self.activeConversation?.insert(message, completionHandler: nil)
    }
    
    func getMessage(customMessage: String, caption: String) -> MSMessage {
        var components = URLComponents()
        
        // create a query item from our custom message
        let item = URLQueryItem(name: "MyMood", value: customMessage)
        
        // put it into an array of query items
        var items = [URLQueryItem]()
        items.append(item)
        components.queryItems = items
        
        // tell messages to use the default message template layout
        let layout = MSMessageTemplateLayout()
        layout.caption = customMessage
        layout.subcaption = "sub caption"
        layout.trailingCaption = "trailing"
        layout.trailingSubcaption = "sub trailing"
        layout.image = UIImage(named: "\(caption).jpg")
        layout.imageTitle = caption
        
        // create a message and tell it the content and layout
        let message = MSMessage()
        message.url = components.url!
        message.layout = layout
        
        // return it for sending
        return message
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
